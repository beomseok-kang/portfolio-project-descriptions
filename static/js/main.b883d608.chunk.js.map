{"version":3,"sources":["Components/ProjectPhotoAndName.tsx","Components/Button.tsx","Components/Stack.tsx","Components/ProjectDescription.tsx","Components/ToNextButton.tsx","Container/ProjectListItemContainer.tsx","lib/funcUtils.ts","Container/ProjectContainer.tsx","Page/ProjectPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProjectPhotoAndName","abbr","title","className","isEvenNum","id","Button","href","children","isFilled","target","rel","defaultProps","stacks","css3","firebase","html5","javascript","react","redux","sass","styledcomponents","typescript","Stack","stack","ProjectDescription","websiteUrl","repositoryUrl","description","libraries","map","key","length","library","dangerouslySetInnerHTML","__html","ToNextButton","toNext","reference","onClick","ref","element","document","getElementById","scrollIntoView","behavior","scrollToRef","ProjectListItemContainer","project","descriptionHTML","text","tempArr","split","forEach","paragraph","i","join","textToHtml","toString","siteUrls","githubUrl","pageUrl","ProjectContainer","queryKey","projects","useEffect","ProjectPage","URLSearchParams","useLocation","search","get","require","undefined","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b883d608.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./ProjectPhotoAndName.scss\";\r\n\r\ntype ProjectPhotoAndNameProps = {\r\n    abbr: string;\r\n    title: string;\r\n    isEvenNum: boolean;\r\n}\r\n\r\nfunction ProjectPhotoAndName({ abbr, title, isEvenNum }: ProjectPhotoAndNameProps) {\r\n\r\n    const className = \"project-photo_and_name\" +\r\n        (isEvenNum? \" even\" : \" odd\");\r\n\r\n    return (\r\n        <div className=\"project-photo_and_name-wrapper\" id={abbr}>\r\n            <div className={className}>\r\n                <h2>{title}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProjectPhotoAndName;","import React from 'react';\r\nimport \"./Button.scss\";\r\n\r\ntype ButtonProps = {\r\n    href: string;\r\n    children: React.ReactNode;\r\n    isFilled: boolean;\r\n}\r\n\r\nfunction Button({ href, children, isFilled }: ButtonProps) {\r\n\r\n    const className = \"btn\" + (\r\n        isFilled? \" filled\": \"\"\r\n    );\r\n\r\n    return (\r\n        <a href={href} className={className} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {children}\r\n        </a>\r\n    );\r\n}\r\n\r\nButton.defaultProps = {\r\n    isFilled: false,\r\n    children: ''\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport \"./Stack.scss\";\r\nimport { stack } from \"../Module/Projects\";\r\n\r\ntype StackProps = {\r\n    stack: stack;\r\n}\r\n\r\n// Stacks: e.g. react, html5, css3, javascript, typescript, python, ...\r\n\r\nconst stacks = {\r\n    css3: \"CSS 3\",\r\n    firebase: \"Firebase\",\r\n    html5: \"HTML 5\",\r\n    javascript: \"JavaScript\",\r\n    react: \"React\",\r\n    redux: \"Redux\",\r\n    sass: \"Sass\",\r\n    styledcomponents: \"Styled Components\",\r\n    typescript: \"TypeScript\"\r\n}\r\n\r\nfunction Stack({ stack }: StackProps) {\r\n\r\n    return (\r\n        <li className=\"stack-list-item\" id={stack}>\r\n            <div className=\"logos\" id={stack}>\r\n                {stack} logo\r\n            </div>\r\n            <div className=\"hovers\">\r\n                {stacks[stack]}\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Stack;","import React from 'react';\r\nimport \"./ProjectDescription.scss\";\r\nimport Button from './Button';\r\nimport Stack from './Stack';\r\nimport { stack } from '../Module/Projects';\r\n\r\ntype ProjectDescriptionProps = {\r\n    isEvenNum: boolean;\r\n    websiteUrl: string;\r\n    repositoryUrl: string;\r\n    description: string;\r\n    stacks: stack[];\r\n    libraries: string[];\r\n}\r\n\r\nfunction ProjectDescription({\r\n    isEvenNum,\r\n    websiteUrl,\r\n    repositoryUrl,\r\n    description,\r\n    stacks,\r\n    libraries\r\n}: ProjectDescriptionProps) {\r\n\r\n    const className = \"project-description\" +\r\n        (isEvenNum? \" even\" : \" odd\");\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"description-upper\">\r\n                <div className=\"stacks-list-wrapper\">\r\n                    <h4>Stacks</h4>\r\n                    <ul className=\"stacks-list\">\r\n                        {\r\n                            stacks.map(stack => (\r\n                                <Stack key={stack} stack={stack}/>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                    {\r\n                        libraries.length > 0\r\n                        ? <>\r\n                            <h4>Other Libraries</h4>\r\n                            <ul className=\"libraries-list\">\r\n                                {\r\n                                    libraries.map(library => (\r\n                                        <li key={library}>{library}</li>\r\n                                    ))\r\n                                }\r\n                            </ul>\r\n                        </>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <div className=\"description-wrapper\">\r\n                    <h4>Description</h4>\r\n                    <div className=\"description-text\" dangerouslySetInnerHTML={{__html: description}}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"buttons-wrapper\">\r\n                <Button href={websiteUrl}>Live Website</Button>\r\n                <Button href={repositoryUrl}>Github Repository</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProjectDescription","import React from 'react';\r\nimport \"./ToNextButton.scss\";\r\n\r\nconst scrollToRef = (ref: string) => {\r\n    const element = document.getElementById(ref);\r\n    element?.scrollIntoView({ behavior: \"smooth\" })\r\n};\r\n\r\ntype ToNextButtonProps = {\r\n    toNext: boolean;\r\n    reference: any;\r\n}\r\n\r\nfunction ToNextButton ({ toNext, reference }: ToNextButtonProps) {\r\n\r\n    const className = \"to-next-button\" + (\r\n        toNext ? \" to-next\" : \" to-prev\"\r\n    );\r\n\r\n    const onClick = () => scrollToRef(reference);\r\n\r\n    return <button onClick={onClick} className={className}>\r\n        <div className=\"arrow\">\r\n            { toNext ? \"To Next\" : \"To Prev\"}\r\n        </div>\r\n    </button>;\r\n}\r\n\r\nexport default ToNextButton;","import React from 'react';\r\nimport ProjectPhotoAndName from '../Components/ProjectPhotoAndName';\r\nimport ProjectDescription from '../Components/ProjectDescription';\r\nimport { project } from '../Module/Projects';\r\nimport \"./ProjectListItemContainer.scss\";\r\nimport ToNextButton from '../Components/ToNextButton';\r\nimport { textToHtml } from '../lib/funcUtils';\r\n\r\ntype ProjectListItemContainerProps = {\r\n    project: project;\r\n    isEvenNum: boolean;\r\n};\r\n\r\nfunction ProjectListItemContainer ({ project, isEvenNum }: ProjectListItemContainerProps) {\r\n\r\n    const descriptionHTML = textToHtml(project.description);\r\n    \r\n    const className = \"project-list-item\" + (\r\n        isEvenNum? \" even\": \" odd\"\r\n    );\r\n\r\n    return (\r\n        <li className={className} id={project.key.toString()}>\r\n            <div className=\"item-left\">\r\n                {\r\n                    project.key !== 1\r\n                    ? <ToNextButton toNext={false} reference={(project.key-1).toString()}/>\r\n                    : null\r\n                }\r\n                <ProjectPhotoAndName\r\n                    abbr={project.abbr}\r\n                    title={project.title}\r\n                    isEvenNum={isEvenNum}\r\n                />\r\n                {\r\n                    project.key !== 6\r\n                    ? <ToNextButton toNext reference={(project.key+1).toString()}/>\r\n                    : null\r\n                }\r\n            </div>\r\n            <ProjectDescription\r\n                repositoryUrl={project.siteUrls.githubUrl}\r\n                websiteUrl={project.siteUrls.pageUrl}\r\n                isEvenNum={isEvenNum}\r\n                description={descriptionHTML}\r\n                stacks={project.stacks}\r\n                libraries={project.libraries}\r\n            />\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ProjectListItemContainer;","export const textToHtml = (text: string) => {\r\n    const tempArr = text.split('\\n');\r\n    tempArr.forEach((paragraph: string, i: number) => {\r\n        return tempArr[i] = '<p>' + paragraph + '</p>'\r\n    });\r\n    const result = tempArr.join('');\r\n    return result;\r\n};","import React, { useEffect } from 'react';\r\nimport { project } from \"../Module/Projects\";\r\nimport \"./ProjectContainer.scss\";\r\nimport ProjectListItemContainer from './ProjectListItemContainer';\r\n\r\ntype ProjectContainerProps = {\r\n    queryKey?: string;\r\n    projects: project[];\r\n};\r\n\r\nconst scrollToRef = (ref: string) => {\r\n    const element = document.getElementById(ref);\r\n    element?.scrollIntoView();\r\n};\r\n\r\nfunction ProjectContainer({ queryKey, projects }: ProjectContainerProps) {\r\n\r\n    const checkEven = (key: number) => {\r\n        return (key%2) === 0\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(queryKey) scrollToRef(queryKey);\r\n    });\r\n\r\n    return (\r\n        <ol className=\"projects-list\">\r\n            {\r\n                projects.map(\r\n                    project => {\r\n                        const isEvenNum = checkEven(project.key);\r\n                        return <ProjectListItemContainer key={project.key} isEvenNum={isEvenNum} project={project}/>\r\n                    }\r\n                )\r\n            }\r\n        </ol>\r\n    );\r\n}\r\n\r\nexport default ProjectContainer","import React from 'react';\r\nimport ProjectContainer from '../Container/ProjectContainer';\r\nimport { project } from '../Module/Projects';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nconst useQuery = () => {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction ProjectPage() {\r\n\r\n    let queryKey = useQuery().get('key');\r\n\r\n    const projects: project[] = require('../Assets/json/projects.json');\r\n\r\n    return <ProjectContainer queryKey={queryKey?queryKey:undefined} projects={projects}/>;\r\n}\r\n\r\nexport default ProjectPage;","import React from 'react';\nimport ProjectPage from './Page/ProjectPage';\nimport { Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Route path=\"/\" component={ProjectPage}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}